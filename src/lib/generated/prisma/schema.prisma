// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  username   String       @unique
  email      String       @unique
  password   String
  avatarUrl  String?
  bio        String?
  role       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  sessions   Session[]
  products   Product[] // <-- Relation Field (User has many Products)
  cartItems  CartItem[]
  likes      Like[]
  liveStream LiveStream[]
  reel       Reel[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String?          @db.LongText()
  price       Float
  createdById String // <-- Foreign Key Field
  createdBy   User             @relation(fields: [createdById], references: [id])
  categoryId  String?
  category    ProductCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  cartItems   CartItem[]
  images      ProductImage[]
  likes       Like[]
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String
  slug      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    String
  productId String
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([productId, userId])
}

model LiveStream {
  id          String   @id @default(cuid())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  isLive      Boolean?
  playbackId  String
  streamKey   String?
  rtmpUrl     String?  @default("rtmp://rtmp.livepeer.com/live")
  createdAt   DateTime @default(now())
}

model Reel {
  id          String   @id @default(cuid())
  name        String?
  caption     String?
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  url         String
  createdAt   DateTime @default(now())
}
